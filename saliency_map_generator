import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import matplotlib.pyplot as plt
import os

# Load the trained model
model = keras.models.load_model("/content/drive/My Drive/plant_image_classification/train15.h5")

# Define a list of class names
class_names = ["Cat", "Dog", "Healthy", "Unhealthy"]

# Define a function to generate saliency maps
@tf.function
def get_saliency_map(image, label, scale_factor):
    image = tf.expand_dims(image, axis=0)
    with tf.GradientTape() as tape:
        tape.watch(image)
        prediction = model(image)
        loss = prediction[:, label]
    gradients = tape.gradient(loss, image)
    gradients = scale_factor * gradients / (tf.reduce_max(tf.abs(gradients)) + 1e-7)
    return gradients[0]

# Define a custom colormap that maps the range of -1..1 to the appropriate colors
cmap = plt.cm.get_cmap('jet')
norm = plt.Normalize(vmin=-1, vmax=1)

# Set the path to the directory containing the test images
test_dir = "/content/drive/My Drive/plant_image_classification/experimental"

# Get a list of all the image files in the directory
image_files = [os.path.join(test_dir, f) for f in os.listdir(test_dir) if f.endswith(".png")]

# Loop over the image paths
for image_file in image_files:
    # Load the image
    image = load_img(image_file, target_size=(512, 512, 3), color_mode="rgb")
    image_array = img_to_array(image) / 255.0   # Scale the image data

    # Get the predicted class and confidence level
    prediction = model.predict(np.array([image_array]))[0]
    predicted_class_idx = np.argmax(prediction)
    predicted_class_label = class_names[predicted_class_idx]
    confidence_level = prediction[predicted_class_idx]

    # Print the predicted class and confidence level
    print("Image: ", image_file)
    print("Predicted Class: " + predicted_class_label)
    print("Confidence Level: {:.2f}%".format(confidence_level * 100))

    # Get saliency map
    saliency_map = get_saliency_map(image_array, np.argmax(prediction), scale_factor=1.3)

    # Print the min and max values of the image array and saliency map
    print("Image array min and max values:", np.min(image_array), np.max(image_array))
    print("Saliency map min and max values:", np.min(saliency_map), np.max(saliency_map))

    # Plot the test image, saliency map, and predicted class name
    fig, axs = plt.subplots(nrows=1, ncols=2, figsize=(10, 20))

    axs[0].imshow(image_array)
    axs[0].axis("off")
    axs[0].set_title("Predicted Class: " + predicted_class_label, fontsize=12)

    saliency_mesh = axs[1].imshow(saliency_map, cmap=cmap, norm=norm, origin='upper')
    axs[1].axis("off")
    axs[1].set_title("Saliency Map:", fontsize=12)

    # Add a colorbar to the saliency map plot
    #cbar = plt.colorbar(saliency_mesh, ax=axs[1])
    #cbar.ax.set_ylabel("Saliency Value", rotation=270, labelpad=15)

    plt.show()

    # Alternatively, you can save the plots to a file instead of showing them
    # fig.savefig("saliency_map_{}.png".format(os.path.basename(image_file).split(".")[0]))

